{"ast":null,"code":"import { objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React$1, { Component, createRef, createContext } from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Collapsible.scss.js';\nconst ParentCollapsibleExpandingContext = /*#__PURE__*/createContext(false);\n\nclass CollapsibleInner extends Component {\n  constructor(...args) {\n    super(...args);\n    this.context = void 0;\n    this.state = {\n      height: null,\n      animationState: 'idle',\n      // eslint-disable-next-line react/no-unused-state\n      open: this.props.open\n    };\n    this.node = /*#__PURE__*/createRef();\n    this.heightNode = /*#__PURE__*/createRef();\n\n    this.handleTransitionEnd = event => {\n      const {\n        target\n      } = event;\n\n      if (target === this.node.current) {\n        this.setState({\n          animationState: 'idle',\n          height: null\n        });\n      }\n    };\n  }\n\n  static getDerivedStateFromProps({\n    open: willOpen\n  }, {\n    open,\n    animationState: prevAnimationState\n  }) {\n    let nextAnimationState = prevAnimationState;\n\n    if (open !== willOpen) {\n      nextAnimationState = 'measuring';\n    }\n\n    return {\n      animationState: nextAnimationState,\n      open: willOpen\n    };\n  }\n\n  componentDidUpdate({\n    open: wasOpen\n  }) {\n    const {\n      animationState\n    } = this.state;\n    const parentCollapsibleExpanding = this.context;\n\n    if (parentCollapsibleExpanding && animationState !== 'idle') {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        animationState: 'idle'\n      });\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      const heightNode = this.heightNode.current;\n\n      switch (animationState) {\n        case 'idle':\n          break;\n\n        case 'measuring':\n          this.setState({\n            animationState: wasOpen ? 'closingStart' : 'openingStart',\n            height: wasOpen && heightNode ? heightNode.scrollHeight : 0\n          });\n          break;\n\n        case 'closingStart':\n          this.setState({\n            animationState: 'closing',\n            height: 0\n          });\n          break;\n\n        case 'openingStart':\n          this.setState({\n            animationState: 'opening',\n            height: heightNode ? heightNode.scrollHeight : 0\n          });\n      }\n    });\n  }\n\n  render() {\n    const {\n      id,\n      expandOnPrint,\n      open,\n      children,\n      transition\n    } = this.props;\n    const {\n      animationState,\n      height\n    } = this.state;\n    const parentCollapsibleExpanding = this.context;\n    const animating = animationState !== 'idle';\n    const wrapperClassName = classNames(styles.Collapsible, open && styles.open, animating && styles.animating, !animating && open && styles.fullyOpen, expandOnPrint && styles.expandOnPrint);\n    const displayHeight = collapsibleHeight(open, animationState, height);\n    const content = animating || open || expandOnPrint ? children : null;\n    const transitionProperties = transition ? {\n      transitionDuration: `${transition.duration}`,\n      transitionTimingFunction: `${transition.timingFunction}`\n    } : null;\n    return /*#__PURE__*/React$1.createElement(ParentCollapsibleExpandingContext.Provider, {\n      value: parentCollapsibleExpanding || open && animationState !== 'idle'\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      id: id,\n      \"aria-hidden\": !open,\n      style: _objectSpread2({\n        maxHeight: `${displayHeight}`\n      }, transitionProperties),\n      className: wrapperClassName,\n      ref: this.node,\n      onTransitionEnd: this.handleTransitionEnd\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      ref: this.heightNode\n    }, content)));\n  }\n\n}\n\nCollapsibleInner.contextType = ParentCollapsibleExpandingContext;\n\nfunction collapsibleHeight(open, animationState, height) {\n  if (animationState === 'idle' && open) {\n    return open ? 'none' : undefined;\n  }\n\n  if (animationState === 'measuring') {\n    return open ? undefined : 'none';\n  }\n\n  return `${height || 0}px`;\n}\n\nconst Collapsible = CollapsibleInner;\nexport { Collapsible };","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/polaris/dist/esm/components/Collapsible/Collapsible.js"],"names":["objectSpread2","_objectSpread2","React$1","Component","createRef","createContext","classNames","styles","ParentCollapsibleExpandingContext","CollapsibleInner","constructor","args","context","state","height","animationState","open","props","node","heightNode","handleTransitionEnd","event","target","current","setState","getDerivedStateFromProps","willOpen","prevAnimationState","nextAnimationState","componentDidUpdate","wasOpen","parentCollapsibleExpanding","requestAnimationFrame","scrollHeight","render","id","expandOnPrint","children","transition","animating","wrapperClassName","Collapsible","fullyOpen","displayHeight","collapsibleHeight","content","transitionProperties","transitionDuration","duration","transitionTimingFunction","timingFunction","createElement","Provider","value","style","maxHeight","className","ref","onTransitionEnd","contextType","undefined"],"mappings":"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","sourcesContent":["import { objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React$1, { Component, createRef, createContext } from 'react';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Collapsible.scss.js';\n\nconst ParentCollapsibleExpandingContext = /*#__PURE__*/createContext(false);\n\nclass CollapsibleInner extends Component {\n  constructor(...args) {\n    super(...args);\n    this.context = void 0;\n    this.state = {\n      height: null,\n      animationState: 'idle',\n      // eslint-disable-next-line react/no-unused-state\n      open: this.props.open\n    };\n    this.node = /*#__PURE__*/createRef();\n    this.heightNode = /*#__PURE__*/createRef();\n\n    this.handleTransitionEnd = event => {\n      const {\n        target\n      } = event;\n\n      if (target === this.node.current) {\n        this.setState({\n          animationState: 'idle',\n          height: null\n        });\n      }\n    };\n  }\n\n  static getDerivedStateFromProps({\n    open: willOpen\n  }, {\n    open,\n    animationState: prevAnimationState\n  }) {\n    let nextAnimationState = prevAnimationState;\n\n    if (open !== willOpen) {\n      nextAnimationState = 'measuring';\n    }\n\n    return {\n      animationState: nextAnimationState,\n      open: willOpen\n    };\n  }\n\n  componentDidUpdate({\n    open: wasOpen\n  }) {\n    const {\n      animationState\n    } = this.state;\n    const parentCollapsibleExpanding = this.context;\n\n    if (parentCollapsibleExpanding && animationState !== 'idle') {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        animationState: 'idle'\n      });\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      const heightNode = this.heightNode.current;\n\n      switch (animationState) {\n        case 'idle':\n          break;\n\n        case 'measuring':\n          this.setState({\n            animationState: wasOpen ? 'closingStart' : 'openingStart',\n            height: wasOpen && heightNode ? heightNode.scrollHeight : 0\n          });\n          break;\n\n        case 'closingStart':\n          this.setState({\n            animationState: 'closing',\n            height: 0\n          });\n          break;\n\n        case 'openingStart':\n          this.setState({\n            animationState: 'opening',\n            height: heightNode ? heightNode.scrollHeight : 0\n          });\n      }\n    });\n  }\n\n  render() {\n    const {\n      id,\n      expandOnPrint,\n      open,\n      children,\n      transition\n    } = this.props;\n    const {\n      animationState,\n      height\n    } = this.state;\n    const parentCollapsibleExpanding = this.context;\n    const animating = animationState !== 'idle';\n    const wrapperClassName = classNames(styles.Collapsible, open && styles.open, animating && styles.animating, !animating && open && styles.fullyOpen, expandOnPrint && styles.expandOnPrint);\n    const displayHeight = collapsibleHeight(open, animationState, height);\n    const content = animating || open || expandOnPrint ? children : null;\n    const transitionProperties = transition ? {\n      transitionDuration: `${transition.duration}`,\n      transitionTimingFunction: `${transition.timingFunction}`\n    } : null;\n    return /*#__PURE__*/React$1.createElement(ParentCollapsibleExpandingContext.Provider, {\n      value: parentCollapsibleExpanding || open && animationState !== 'idle'\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      id: id,\n      \"aria-hidden\": !open,\n      style: _objectSpread2({\n        maxHeight: `${displayHeight}`\n      }, transitionProperties),\n      className: wrapperClassName,\n      ref: this.node,\n      onTransitionEnd: this.handleTransitionEnd\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      ref: this.heightNode\n    }, content)));\n  }\n\n}\n\nCollapsibleInner.contextType = ParentCollapsibleExpandingContext;\n\nfunction collapsibleHeight(open, animationState, height) {\n  if (animationState === 'idle' && open) {\n    return open ? 'none' : undefined;\n  }\n\n  if (animationState === 'measuring') {\n    return open ? undefined : 'none';\n  }\n\n  return `${height || 0}px`;\n}\n\nconst Collapsible = CollapsibleInner;\n\nexport { Collapsible };\n"]},"metadata":{},"sourceType":"module"}