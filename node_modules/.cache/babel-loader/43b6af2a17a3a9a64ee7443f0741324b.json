{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar predicates_1 = require(\"@shopify/predicates\");\n/**\n * A factory for creating reusable validation functions.\n *\n * ```tsx\n *  const isAColor = validator((input) => ['red', 'blue', 'green', 'yellow'].includes(input));\n *\n *  // the returned function takes an error string or a function to generate errors\n *  const colorField = useField({\n *    value: 'green',\n *    validates: isAColor((input) => `${input} is not a color`);\n *  })\n * ```\n *\n * By default validators will return true automatically if the value is empty (`null`, `undefined` or `''`). You can circumvent this by using the `skipOnEmpty` option.\n *\n * ```tsx\n *  const isAColor = validator(\n *    (input) => ['red', 'blue', 'green', 'yellow'].includes(input),\n *    {skipOnEmpty: false},\n *  );\n * ```\n *\n * @param matcher - a function that takes in an input and returns `true` if the value is valid, or `false` if it is not.\n * @param options - an optional configuration object.\n */\n\n\nfunction validator(matcher, _a) {\n  var _b = (_a === void 0 ? {} : _a).skipOnEmpty,\n      skipOnEmpty = _b === void 0 ? true : _b;\n  return function (errorContent) {\n    return function (input) {\n      if (skipOnEmpty && predicates_1.isEmpty(input)) {\n        return;\n      }\n\n      var matches = matcher(input);\n\n      if (matches) {\n        return;\n      }\n\n      if (typeof errorContent === 'function') {\n        return errorContent(input);\n      }\n\n      return errorContent;\n    };\n  };\n}\n\nexports.validator = validator;","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/react-form/dist/src/validation/validator.js"],"names":["Object","defineProperty","exports","value","predicates_1","require","validator","matcher","_a","_b","skipOnEmpty","errorContent","input","isEmpty","matches"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,qBAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,EAA5B,EAAgC;AAC5B,MAAIC,EAAE,GAAG,CAACD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAtB,EAA0BE,WAAnC;AAAA,MAAgDA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAArF;AACA,SAAO,UAAUE,YAAV,EAAwB;AAC3B,WAAO,UAAUC,KAAV,EAAiB;AACpB,UAAIF,WAAW,IAAIN,YAAY,CAACS,OAAb,CAAqBD,KAArB,CAAnB,EAAgD;AAC5C;AACH;;AACD,UAAIE,OAAO,GAAGP,OAAO,CAACK,KAAD,CAArB;;AACA,UAAIE,OAAJ,EAAa;AACT;AACH;;AACD,UAAI,OAAOH,YAAP,KAAwB,UAA5B,EAAwC;AACpC,eAAOA,YAAY,CAACC,KAAD,CAAnB;AACH;;AACD,aAAOD,YAAP;AACH,KAZD;AAaH,GAdD;AAeH;;AACDT,OAAO,CAACI,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar predicates_1 = require(\"@shopify/predicates\");\n/**\n * A factory for creating reusable validation functions.\n *\n * ```tsx\n *  const isAColor = validator((input) => ['red', 'blue', 'green', 'yellow'].includes(input));\n *\n *  // the returned function takes an error string or a function to generate errors\n *  const colorField = useField({\n *    value: 'green',\n *    validates: isAColor((input) => `${input} is not a color`);\n *  })\n * ```\n *\n * By default validators will return true automatically if the value is empty (`null`, `undefined` or `''`). You can circumvent this by using the `skipOnEmpty` option.\n *\n * ```tsx\n *  const isAColor = validator(\n *    (input) => ['red', 'blue', 'green', 'yellow'].includes(input),\n *    {skipOnEmpty: false},\n *  );\n * ```\n *\n * @param matcher - a function that takes in an input and returns `true` if the value is valid, or `false` if it is not.\n * @param options - an optional configuration object.\n */\nfunction validator(matcher, _a) {\n    var _b = (_a === void 0 ? {} : _a).skipOnEmpty, skipOnEmpty = _b === void 0 ? true : _b;\n    return function (errorContent) {\n        return function (input) {\n            if (skipOnEmpty && predicates_1.isEmpty(input)) {\n                return;\n            }\n            var matches = matcher(input);\n            if (matches) {\n                return;\n            }\n            if (typeof errorContent === 'function') {\n                return errorContent(input);\n            }\n            return errorContent;\n        };\n    };\n}\nexports.validator = validator;\n"]},"metadata":{},"sourceType":"script"}