{"ast":null,"code":"import React$1, { PureComponent } from 'react';\nimport { clamp as clamp$1 } from '../../utilities/clamp.js';\nimport { hsbToRgb } from '../../utilities/color-transformers.js';\nimport styles from './ColorPicker.scss.js';\nimport { Slidable as Slidable$1 } from './components/Slidable/Slidable.js';\nimport { AlphaPicker as AlphaPicker$1 } from './components/AlphaPicker/AlphaPicker.js';\nimport { HuePicker as HuePicker$1 } from './components/HuePicker/HuePicker.js';\n\nclass ColorPicker extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pickerSize: 0\n    };\n    this.colorNode = null;\n\n    this.setColorNode = node => {\n      this.colorNode = node;\n    };\n\n    this.handleHueChange = hue => {\n      const {\n        color: {\n          brightness,\n          saturation,\n          alpha = 1\n        },\n        onChange\n      } = this.props;\n      onChange({\n        hue,\n        brightness,\n        saturation,\n        alpha\n      });\n    };\n\n    this.handleAlphaChange = alpha => {\n      const {\n        color: {\n          hue,\n          brightness,\n          saturation\n        },\n        onChange\n      } = this.props;\n      onChange({\n        hue,\n        brightness,\n        saturation,\n        alpha\n      });\n    };\n\n    this.handleDraggerMove = ({\n      x,\n      y\n    }) => {\n      const {\n        pickerSize\n      } = this.state;\n      const {\n        color: {\n          hue,\n          alpha = 1\n        },\n        onChange\n      } = this.props;\n      const saturation = clamp$1(x / pickerSize, 0, 1);\n      const brightness = clamp$1(1 - y / pickerSize, 0, 1);\n      onChange({\n        hue,\n        saturation,\n        brightness,\n        alpha\n      });\n    };\n\n    this.handlePickerDrag = event => {\n      // prevents external elements from being selected\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    const {\n      colorNode\n    } = this;\n\n    if (colorNode == null) {\n      return;\n    }\n\n    this.setState({\n      pickerSize: colorNode.clientWidth\n    });\n\n    if (process.env.NODE_ENV === 'development') {\n      setTimeout(() => {\n        this.setState({\n          pickerSize: colorNode.clientWidth\n        });\n      }, 0);\n    }\n  }\n\n  render() {\n    const {\n      id,\n      color,\n      allowAlpha\n    } = this.props;\n    const {\n      hue,\n      saturation,\n      brightness,\n      alpha: providedAlpha\n    } = color;\n    const {\n      pickerSize\n    } = this.state;\n    const alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1;\n    const {\n      red,\n      green,\n      blue\n    } = hsbToRgb({\n      hue,\n      saturation: 1,\n      brightness: 1\n    });\n    const colorString = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n    const draggerX = clamp$1(saturation * pickerSize, 0, pickerSize);\n    const draggerY = clamp$1(pickerSize - brightness * pickerSize, 0, pickerSize);\n    const alphaSliderMarkup = allowAlpha ? /*#__PURE__*/React$1.createElement(AlphaPicker$1, {\n      alpha: alpha,\n      color: color,\n      onChange: this.handleAlphaChange\n    }) : null;\n    return /*#__PURE__*/React$1.createElement(\"div\", {\n      className: styles.ColorPicker,\n      id: id,\n      onMouseDown: this.handlePickerDrag\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      ref: this.setColorNode,\n      className: styles.MainColor\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      className: styles.ColorLayer,\n      style: {\n        backgroundColor: colorString\n      }\n    }), /*#__PURE__*/React$1.createElement(Slidable$1, {\n      onChange: this.handleDraggerMove,\n      draggerX: draggerX,\n      draggerY: draggerY\n    })), /*#__PURE__*/React$1.createElement(HuePicker$1, {\n      hue: hue,\n      onChange: this.handleHueChange\n    }), alphaSliderMarkup);\n  }\n\n}\n\nexport { ColorPicker };","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/polaris/dist/esm/components/ColorPicker/ColorPicker.js"],"names":["React$1","PureComponent","clamp","clamp$1","hsbToRgb","styles","Slidable","Slidable$1","AlphaPicker","AlphaPicker$1","HuePicker","HuePicker$1","ColorPicker","constructor","args","state","pickerSize","colorNode","setColorNode","node","handleHueChange","hue","color","brightness","saturation","alpha","onChange","props","handleAlphaChange","handleDraggerMove","x","y","handlePickerDrag","event","preventDefault","componentDidMount","setState","clientWidth","process","env","NODE_ENV","setTimeout","render","id","allowAlpha","providedAlpha","red","green","blue","colorString","draggerX","draggerY","alphaSliderMarkup","createElement","className","onMouseDown","ref","MainColor","ColorLayer","style","backgroundColor"],"mappings":"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","sourcesContent":["import React$1, { PureComponent } from 'react';\nimport { clamp as clamp$1 } from '../../utilities/clamp.js';\nimport { hsbToRgb } from '../../utilities/color-transformers.js';\nimport styles from './ColorPicker.scss.js';\nimport { Slidable as Slidable$1 } from './components/Slidable/Slidable.js';\nimport { AlphaPicker as AlphaPicker$1 } from './components/AlphaPicker/AlphaPicker.js';\nimport { HuePicker as HuePicker$1 } from './components/HuePicker/HuePicker.js';\n\nclass ColorPicker extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pickerSize: 0\n    };\n    this.colorNode = null;\n\n    this.setColorNode = node => {\n      this.colorNode = node;\n    };\n\n    this.handleHueChange = hue => {\n      const {\n        color: {\n          brightness,\n          saturation,\n          alpha = 1\n        },\n        onChange\n      } = this.props;\n      onChange({\n        hue,\n        brightness,\n        saturation,\n        alpha\n      });\n    };\n\n    this.handleAlphaChange = alpha => {\n      const {\n        color: {\n          hue,\n          brightness,\n          saturation\n        },\n        onChange\n      } = this.props;\n      onChange({\n        hue,\n        brightness,\n        saturation,\n        alpha\n      });\n    };\n\n    this.handleDraggerMove = ({\n      x,\n      y\n    }) => {\n      const {\n        pickerSize\n      } = this.state;\n      const {\n        color: {\n          hue,\n          alpha = 1\n        },\n        onChange\n      } = this.props;\n      const saturation = clamp$1(x / pickerSize, 0, 1);\n      const brightness = clamp$1(1 - y / pickerSize, 0, 1);\n      onChange({\n        hue,\n        saturation,\n        brightness,\n        alpha\n      });\n    };\n\n    this.handlePickerDrag = event => {\n      // prevents external elements from being selected\n      event.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    const {\n      colorNode\n    } = this;\n\n    if (colorNode == null) {\n      return;\n    }\n\n    this.setState({\n      pickerSize: colorNode.clientWidth\n    });\n\n    if (process.env.NODE_ENV === 'development') {\n      setTimeout(() => {\n        this.setState({\n          pickerSize: colorNode.clientWidth\n        });\n      }, 0);\n    }\n  }\n\n  render() {\n    const {\n      id,\n      color,\n      allowAlpha\n    } = this.props;\n    const {\n      hue,\n      saturation,\n      brightness,\n      alpha: providedAlpha\n    } = color;\n    const {\n      pickerSize\n    } = this.state;\n    const alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1;\n    const {\n      red,\n      green,\n      blue\n    } = hsbToRgb({\n      hue,\n      saturation: 1,\n      brightness: 1\n    });\n    const colorString = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n    const draggerX = clamp$1(saturation * pickerSize, 0, pickerSize);\n    const draggerY = clamp$1(pickerSize - brightness * pickerSize, 0, pickerSize);\n    const alphaSliderMarkup = allowAlpha ? /*#__PURE__*/React$1.createElement(AlphaPicker$1, {\n      alpha: alpha,\n      color: color,\n      onChange: this.handleAlphaChange\n    }) : null;\n    return /*#__PURE__*/React$1.createElement(\"div\", {\n      className: styles.ColorPicker,\n      id: id,\n      onMouseDown: this.handlePickerDrag\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      ref: this.setColorNode,\n      className: styles.MainColor\n    }, /*#__PURE__*/React$1.createElement(\"div\", {\n      className: styles.ColorLayer,\n      style: {\n        backgroundColor: colorString\n      }\n    }), /*#__PURE__*/React$1.createElement(Slidable$1, {\n      onChange: this.handleDraggerMove,\n      draggerX: draggerX,\n      draggerY: draggerY\n    })), /*#__PURE__*/React$1.createElement(HuePicker$1, {\n      hue: hue,\n      onChange: this.handleHueChange\n    }), alphaSliderMarkup);\n  }\n\n}\n\nexport { ColorPicker };\n"]},"metadata":{},"sourceType":"module"}