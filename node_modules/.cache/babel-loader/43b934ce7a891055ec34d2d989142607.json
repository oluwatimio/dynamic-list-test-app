{"ast":null,"code":"import { clamp as clamp$1 } from './clamp.js';\n\nfunction rgbString(color) {\n  const {\n    red,\n    green,\n    blue\n  } = color;\n\n  if ('alpha' in color) {\n    return `rgba(${red}, ${green}, ${blue}, ${color.alpha})`;\n  } else {\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n}\n\nconst rgbaString = rgbString;\n\nfunction rgbToHex({\n  red,\n  green,\n  blue\n}) {\n  return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;\n}\n\nfunction componentToHex(component) {\n  const hex = component.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\nfunction hsbToHex(color) {\n  return rgbToHex(hsbToRgb(color));\n}\n\nfunction rgbFromHueAndChroma(hue, chroma) {\n  const huePrime = hue / 60;\n  const hueDelta = 1 - Math.abs(huePrime % 2 - 1);\n  const intermediateValue = chroma * hueDelta;\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime <= 1) {\n    red = chroma;\n    green = intermediateValue;\n    blue = 0;\n  }\n\n  if (huePrime >= 1 && huePrime <= 2) {\n    red = intermediateValue;\n    green = chroma;\n    blue = 0;\n  }\n\n  if (huePrime >= 2 && huePrime <= 3) {\n    red = 0;\n    green = chroma;\n    blue = intermediateValue;\n  }\n\n  if (huePrime >= 3 && huePrime <= 4) {\n    red = 0;\n    green = intermediateValue;\n    blue = chroma;\n  }\n\n  if (huePrime >= 4 && huePrime <= 5) {\n    red = intermediateValue;\n    green = 0;\n    blue = chroma;\n  }\n\n  if (huePrime >= 5 && huePrime <= 6) {\n    red = chroma;\n    green = 0;\n    blue = intermediateValue;\n  }\n\n  return {\n    red,\n    green,\n    blue\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\nfunction hsbToRgb(color) {\n  const {\n    hue,\n    saturation,\n    brightness,\n    alpha = 1\n  } = color;\n  const chroma = brightness * saturation;\n  let {\n    red,\n    green,\n    blue\n  } = rgbFromHueAndChroma(hue, chroma);\n  const chromaBrightnessDelta = brightness - chroma;\n  red += chromaBrightnessDelta;\n  green += chromaBrightnessDelta;\n  blue += chromaBrightnessDelta;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\nfunction hslToRgb(color) {\n  const {\n    hue,\n    saturation,\n    lightness,\n    alpha = 1\n  } = color;\n  const chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);\n  let {\n    red,\n    green,\n    blue\n  } = rgbFromHueAndChroma(hue, chroma);\n  const lightnessVal = lightness / 100 - chroma / 2;\n  red += lightnessVal;\n  green += lightnessVal;\n  blue += lightnessVal;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n} // ref https://en.wikipedia.org/wiki/HSL_and_HSV\n\n\nfunction rgbToHsbl(color, type = 'b') {\n  const {\n    alpha = 1\n  } = color;\n  const red = color.red / 255;\n  const green = color.green / 255;\n  const blue = color.blue / 255;\n  const largestComponent = Math.max(red, green, blue);\n  const smallestComponent = Math.min(red, green, blue);\n  const delta = largestComponent - smallestComponent;\n  const lightness = (largestComponent + smallestComponent) / 2;\n  let saturation = 0;\n\n  if (largestComponent === 0) {\n    saturation = 0;\n  } else if (type === 'b') {\n    saturation = delta / largestComponent;\n  } else if (type === 'l') {\n    const baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);\n    saturation = isNaN(baseSaturation) ? 0 : baseSaturation;\n  }\n\n  let huePercentage = 0;\n\n  switch (largestComponent) {\n    case red:\n      huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n\n    case green:\n      huePercentage = (blue - red) / delta + 2;\n      break;\n\n    case blue:\n      huePercentage = (red - green) / delta + 4;\n  }\n\n  const hue = Math.round(huePercentage / 6 * 360);\n  return {\n    hue: clamp$1(hue, 0, 360) || 0,\n    saturation: parseFloat(clamp$1(saturation, 0, 1).toFixed(2)),\n    brightness: parseFloat(clamp$1(largestComponent, 0, 1).toFixed(2)),\n    lightness: parseFloat(lightness.toFixed(2)),\n    alpha: parseFloat(alpha.toFixed(2))\n  };\n}\n\nfunction rgbToHsb(color) {\n  const {\n    hue,\n    saturation,\n    brightness,\n    alpha = 1\n  } = rgbToHsbl(color, 'b');\n  return {\n    hue,\n    saturation,\n    brightness,\n    alpha\n  };\n}\n\nfunction rgbToHsl(color) {\n  const {\n    hue,\n    saturation: rawSaturation,\n    lightness: rawLightness,\n    alpha = 1\n  } = rgbToHsbl(color, 'l');\n  const saturation = rawSaturation * 100;\n  const lightness = rawLightness * 100;\n  return {\n    hue,\n    saturation,\n    lightness,\n    alpha\n  };\n}\n\nfunction hexToRgb(color) {\n  if (color.length === 4) {\n    const repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2);\n\n    const _red = parseInt(repeatHex(1, 2), 16);\n\n    const _green = parseInt(repeatHex(2, 3), 16);\n\n    const _blue = parseInt(repeatHex(3, 4), 16);\n\n    return {\n      red: _red,\n      green: _green,\n      blue: _blue\n    };\n  }\n\n  const red = parseInt(color.slice(1, 3), 16);\n  const green = parseInt(color.slice(3, 5), 16);\n  const blue = parseInt(color.slice(5, 7), 16);\n  return {\n    red,\n    green,\n    blue\n  };\n}\n\nfunction getColorType(color) {\n  if (color.includes('#')) {\n    return 'hex';\n  } else if (color.includes('rgb')) {\n    return 'rgb';\n  } else if (color.includes('rgba')) {\n    return 'rgba';\n  } else if (color.includes('hsl')) {\n    return 'hsl';\n  } else if (color.includes('hsla')) {\n    return 'hsla';\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      /* eslint-disable-next-line no-console */\n      console.warn('Accepted colors formats are: hex, rgb, rgba, hsl and hsla');\n    }\n\n    return 'default';\n  }\n}\n\nfunction hslToString(hslColor) {\n  if (typeof hslColor === 'string') {\n    return hslColor;\n  }\n\n  const alpha = 'alpha' in hslColor ? hslColor.alpha : 1;\n  const {\n    hue,\n    lightness,\n    saturation\n  } = hslColor;\n  return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n}\n\nfunction rgbToObject(color) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const colorMatch = color.match(/\\(([^)]+)\\)/);\n\n  if (!colorMatch) {\n    return {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0\n    };\n  }\n\n  const [red, green, blue, alpha] = colorMatch[1].split(',');\n  const objColor = {\n    red: parseInt(red, 10),\n    green: parseInt(green, 10),\n    blue: parseInt(blue, 10),\n    alpha: parseInt(alpha, 10) || 1\n  };\n  return objColor;\n}\n\nfunction hexToHsla(color) {\n  return rgbToHsl(hexToRgb(color));\n}\n\nfunction rbgStringToHsla(color) {\n  return rgbToHsl(rgbToObject(color));\n}\n\nfunction hslToObject(color) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const colorMatch = color.match(/\\(([^)]+)\\)/);\n\n  if (!colorMatch) {\n    return {\n      hue: 0,\n      saturation: 0,\n      lightness: 0,\n      alpha: 0\n    };\n  }\n\n  const [hue, saturation, lightness, alpha] = colorMatch[1].split(',');\n  const objColor = {\n    hue: parseInt(hue, 10),\n    saturation: parseInt(saturation, 10),\n    lightness: parseInt(lightness, 10),\n    alpha: parseFloat(alpha) || 1\n  };\n  return objColor;\n}\n\nfunction colorToHsla(color) {\n  const type = getColorType(color);\n\n  switch (type) {\n    case 'hex':\n      return hexToHsla(color);\n\n    case 'rgb':\n    case 'rgba':\n      return rbgStringToHsla(color);\n\n    case 'hsl':\n    case 'hsla':\n      return hslToObject(color);\n\n    case 'default':\n    default:\n      throw new Error('Accepted color formats are: hex, rgb, rgba, hsl and hsla');\n  }\n}\n\nexport { colorToHsla, hexToRgb, hsbToHex, hsbToRgb, hslToRgb, hslToString, rgbString, rgbToHex, rgbToHsb, rgbToHsl, rgbaString };","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/polaris/dist/esm/utilities/color-transformers.js"],"names":["clamp","clamp$1","rgbString","color","red","green","blue","alpha","rgbaString","rgbToHex","componentToHex","component","hex","toString","length","hsbToHex","hsbToRgb","rgbFromHueAndChroma","hue","chroma","huePrime","hueDelta","Math","abs","intermediateValue","saturation","brightness","chromaBrightnessDelta","round","hslToRgb","lightness","lightnessVal","rgbToHsbl","type","largestComponent","max","smallestComponent","min","delta","baseSaturation","isNaN","huePercentage","parseFloat","toFixed","rgbToHsb","rgbToHsl","rawSaturation","rawLightness","hexToRgb","repeatHex","hex1","hex2","slice","repeat","_red","parseInt","_green","_blue","getColorType","includes","process","env","NODE_ENV","console","warn","hslToString","hslColor","rgbToObject","colorMatch","match","split","objColor","hexToHsla","rbgStringToHsla","hslToObject","colorToHsla","Error"],"mappings":"AAAA,SAASA,KAAK,IAAIC,OAAlB,QAAiC,YAAjC;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA;AAHI,MAIFH,KAJJ;;AAMA,MAAI,WAAWA,KAAf,EAAsB;AACpB,WAAQ,QAAOC,GAAI,KAAIC,KAAM,KAAIC,IAAK,KAAIH,KAAK,CAACI,KAAM,GAAtD;AACD,GAFD,MAEO;AACL,WAAQ,OAAMH,GAAI,KAAIC,KAAM,KAAIC,IAAK,GAArC;AACD;AACF;;AACD,MAAME,UAAU,GAAGN,SAAnB;;AACA,SAASO,QAAT,CAAkB;AAChBL,EAAAA,GADgB;AAEhBC,EAAAA,KAFgB;AAGhBC,EAAAA;AAHgB,CAAlB,EAIG;AACD,SAAQ,IAAGI,cAAc,CAACN,GAAD,CAAM,GAAEM,cAAc,CAACL,KAAD,CAAQ,GAAEK,cAAc,CAACJ,IAAD,CAAO,EAA9E;AACD;;AAED,SAASI,cAAT,CAAwBC,SAAxB,EAAmC;AACjC,QAAMC,GAAG,GAAGD,SAAS,CAACE,QAAV,CAAmB,EAAnB,CAAZ;AACA,SAAOD,GAAG,CAACE,MAAJ,KAAe,CAAf,GAAoB,IAAGF,GAAI,EAA3B,GAA+BA,GAAtC;AACD;;AAED,SAASG,QAAT,CAAkBZ,KAAlB,EAAyB;AACvB,SAAOM,QAAQ,CAACO,QAAQ,CAACb,KAAD,CAAT,CAAf;AACD;;AAED,SAASc,mBAAT,CAA6BC,GAA7B,EAAkCC,MAAlC,EAA0C;AACxC,QAAMC,QAAQ,GAAGF,GAAG,GAAG,EAAvB;AACA,QAAMG,QAAQ,GAAG,IAAIC,IAAI,CAACC,GAAL,CAASH,QAAQ,GAAG,CAAX,GAAe,CAAxB,CAArB;AACA,QAAMI,iBAAiB,GAAGL,MAAM,GAAGE,QAAnC;AACA,MAAIjB,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,MAAIc,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClChB,IAAAA,GAAG,GAAGe,MAAN;AACAd,IAAAA,KAAK,GAAGmB,iBAAR;AACAlB,IAAAA,IAAI,GAAG,CAAP;AACD;;AAED,MAAIc,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClChB,IAAAA,GAAG,GAAGoB,iBAAN;AACAnB,IAAAA,KAAK,GAAGc,MAAR;AACAb,IAAAA,IAAI,GAAG,CAAP;AACD;;AAED,MAAIc,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClChB,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,KAAK,GAAGc,MAAR;AACAb,IAAAA,IAAI,GAAGkB,iBAAP;AACD;;AAED,MAAIJ,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClChB,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,KAAK,GAAGmB,iBAAR;AACAlB,IAAAA,IAAI,GAAGa,MAAP;AACD;;AAED,MAAIC,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClChB,IAAAA,GAAG,GAAGoB,iBAAN;AACAnB,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,IAAI,GAAGa,MAAP;AACD;;AAED,MAAIC,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EAAoC;AAClChB,IAAAA,GAAG,GAAGe,MAAN;AACAd,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,IAAI,GAAGkB,iBAAP;AACD;;AAED,SAAO;AACLpB,IAAAA,GADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,C,CAAC;;;AAGF,SAASU,QAAT,CAAkBb,KAAlB,EAAyB;AACvB,QAAM;AACJe,IAAAA,GADI;AAEJO,IAAAA,UAFI;AAGJC,IAAAA,UAHI;AAIJnB,IAAAA,KAAK,GAAG;AAJJ,MAKFJ,KALJ;AAMA,QAAMgB,MAAM,GAAGO,UAAU,GAAGD,UAA5B;AACA,MAAI;AACFrB,IAAAA,GADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA;AAHE,MAIAW,mBAAmB,CAACC,GAAD,EAAMC,MAAN,CAJvB;AAKA,QAAMQ,qBAAqB,GAAGD,UAAU,GAAGP,MAA3C;AACAf,EAAAA,GAAG,IAAIuB,qBAAP;AACAtB,EAAAA,KAAK,IAAIsB,qBAAT;AACArB,EAAAA,IAAI,IAAIqB,qBAAR;AACA,SAAO;AACLvB,IAAAA,GAAG,EAAEkB,IAAI,CAACM,KAAL,CAAWxB,GAAG,GAAG,GAAjB,CADA;AAELC,IAAAA,KAAK,EAAEiB,IAAI,CAACM,KAAL,CAAWvB,KAAK,GAAG,GAAnB,CAFF;AAGLC,IAAAA,IAAI,EAAEgB,IAAI,CAACM,KAAL,CAAWtB,IAAI,GAAG,GAAlB,CAHD;AAILC,IAAAA;AAJK,GAAP;AAMD,C,CAAC;;;AAEF,SAASsB,QAAT,CAAkB1B,KAAlB,EAAyB;AACvB,QAAM;AACJe,IAAAA,GADI;AAEJO,IAAAA,UAFI;AAGJK,IAAAA,SAHI;AAIJvB,IAAAA,KAAK,GAAG;AAJJ,MAKFJ,KALJ;AAMA,QAAMgB,MAAM,GAAG,CAAC,IAAIG,IAAI,CAACC,GAAL,CAAS,KAAKO,SAAS,GAAG,GAAjB,IAAwB,CAAjC,CAAL,KAA6CL,UAAU,GAAG,GAA1D,CAAf;AACA,MAAI;AACFrB,IAAAA,GADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA;AAHE,MAIAW,mBAAmB,CAACC,GAAD,EAAMC,MAAN,CAJvB;AAKA,QAAMY,YAAY,GAAGD,SAAS,GAAG,GAAZ,GAAkBX,MAAM,GAAG,CAAhD;AACAf,EAAAA,GAAG,IAAI2B,YAAP;AACA1B,EAAAA,KAAK,IAAI0B,YAAT;AACAzB,EAAAA,IAAI,IAAIyB,YAAR;AACA,SAAO;AACL3B,IAAAA,GAAG,EAAEkB,IAAI,CAACM,KAAL,CAAWxB,GAAG,GAAG,GAAjB,CADA;AAELC,IAAAA,KAAK,EAAEiB,IAAI,CAACM,KAAL,CAAWvB,KAAK,GAAG,GAAnB,CAFF;AAGLC,IAAAA,IAAI,EAAEgB,IAAI,CAACM,KAAL,CAAWtB,IAAI,GAAG,GAAlB,CAHD;AAILC,IAAAA;AAJK,GAAP;AAMD,C,CAAC;;;AAEF,SAASyB,SAAT,CAAmB7B,KAAnB,EAA0B8B,IAAI,GAAG,GAAjC,EAAsC;AACpC,QAAM;AACJ1B,IAAAA,KAAK,GAAG;AADJ,MAEFJ,KAFJ;AAGA,QAAMC,GAAG,GAAGD,KAAK,CAACC,GAAN,GAAY,GAAxB;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACE,KAAN,GAAc,GAA5B;AACA,QAAMC,IAAI,GAAGH,KAAK,CAACG,IAAN,GAAa,GAA1B;AACA,QAAM4B,gBAAgB,GAAGZ,IAAI,CAACa,GAAL,CAAS/B,GAAT,EAAcC,KAAd,EAAqBC,IAArB,CAAzB;AACA,QAAM8B,iBAAiB,GAAGd,IAAI,CAACe,GAAL,CAASjC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,CAA1B;AACA,QAAMgC,KAAK,GAAGJ,gBAAgB,GAAGE,iBAAjC;AACA,QAAMN,SAAS,GAAG,CAACI,gBAAgB,GAAGE,iBAApB,IAAyC,CAA3D;AACA,MAAIX,UAAU,GAAG,CAAjB;;AAEA,MAAIS,gBAAgB,KAAK,CAAzB,EAA4B;AAC1BT,IAAAA,UAAU,GAAG,CAAb;AACD,GAFD,MAEO,IAAIQ,IAAI,KAAK,GAAb,EAAkB;AACvBR,IAAAA,UAAU,GAAGa,KAAK,GAAGJ,gBAArB;AACD,GAFM,MAEA,IAAID,IAAI,KAAK,GAAb,EAAkB;AACvB,UAAMM,cAAc,GAAGT,SAAS,GAAG,GAAZ,GAAkBQ,KAAK,IAAI,IAAIJ,gBAAJ,GAAuBE,iBAA3B,CAAvB,GAAuEE,KAAK,IAAIJ,gBAAgB,GAAGE,iBAAvB,CAAnG;AACAX,IAAAA,UAAU,GAAGe,KAAK,CAACD,cAAD,CAAL,GAAwB,CAAxB,GAA4BA,cAAzC;AACD;;AAED,MAAIE,aAAa,GAAG,CAApB;;AAEA,UAAQP,gBAAR;AACE,SAAK9B,GAAL;AACEqC,MAAAA,aAAa,GAAG,CAACpC,KAAK,GAAGC,IAAT,IAAiBgC,KAAjB,IAA0BjC,KAAK,GAAGC,IAAR,GAAe,CAAf,GAAmB,CAA7C,CAAhB;AACA;;AAEF,SAAKD,KAAL;AACEoC,MAAAA,aAAa,GAAG,CAACnC,IAAI,GAAGF,GAAR,IAAekC,KAAf,GAAuB,CAAvC;AACA;;AAEF,SAAKhC,IAAL;AACEmC,MAAAA,aAAa,GAAG,CAACrC,GAAG,GAAGC,KAAP,IAAgBiC,KAAhB,GAAwB,CAAxC;AAVJ;;AAaA,QAAMpB,GAAG,GAAGI,IAAI,CAACM,KAAL,CAAWa,aAAa,GAAG,CAAhB,GAAoB,GAA/B,CAAZ;AACA,SAAO;AACLvB,IAAAA,GAAG,EAAEjB,OAAO,CAACiB,GAAD,EAAM,CAAN,EAAS,GAAT,CAAP,IAAwB,CADxB;AAELO,IAAAA,UAAU,EAAEiB,UAAU,CAACzC,OAAO,CAACwB,UAAD,EAAa,CAAb,EAAgB,CAAhB,CAAP,CAA0BkB,OAA1B,CAAkC,CAAlC,CAAD,CAFjB;AAGLjB,IAAAA,UAAU,EAAEgB,UAAU,CAACzC,OAAO,CAACiC,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,CAAP,CAAgCS,OAAhC,CAAwC,CAAxC,CAAD,CAHjB;AAILb,IAAAA,SAAS,EAAEY,UAAU,CAACZ,SAAS,CAACa,OAAV,CAAkB,CAAlB,CAAD,CAJhB;AAKLpC,IAAAA,KAAK,EAAEmC,UAAU,CAACnC,KAAK,CAACoC,OAAN,CAAc,CAAd,CAAD;AALZ,GAAP;AAOD;;AAED,SAASC,QAAT,CAAkBzC,KAAlB,EAAyB;AACvB,QAAM;AACJe,IAAAA,GADI;AAEJO,IAAAA,UAFI;AAGJC,IAAAA,UAHI;AAIJnB,IAAAA,KAAK,GAAG;AAJJ,MAKFyB,SAAS,CAAC7B,KAAD,EAAQ,GAAR,CALb;AAMA,SAAO;AACLe,IAAAA,GADK;AAELO,IAAAA,UAFK;AAGLC,IAAAA,UAHK;AAILnB,IAAAA;AAJK,GAAP;AAMD;;AACD,SAASsC,QAAT,CAAkB1C,KAAlB,EAAyB;AACvB,QAAM;AACJe,IAAAA,GADI;AAEJO,IAAAA,UAAU,EAAEqB,aAFR;AAGJhB,IAAAA,SAAS,EAAEiB,YAHP;AAIJxC,IAAAA,KAAK,GAAG;AAJJ,MAKFyB,SAAS,CAAC7B,KAAD,EAAQ,GAAR,CALb;AAMA,QAAMsB,UAAU,GAAGqB,aAAa,GAAG,GAAnC;AACA,QAAMhB,SAAS,GAAGiB,YAAY,GAAG,GAAjC;AACA,SAAO;AACL7B,IAAAA,GADK;AAELO,IAAAA,UAFK;AAGLK,IAAAA,SAHK;AAILvB,IAAAA;AAJK,GAAP;AAMD;;AACD,SAASyC,QAAT,CAAkB7C,KAAlB,EAAyB;AACvB,MAAIA,KAAK,CAACW,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAMmC,SAAS,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgBhD,KAAK,CAACiD,KAAN,CAAYF,IAAZ,EAAkBC,IAAlB,EAAwBE,MAAxB,CAA+B,CAA/B,CAAlC;;AAEA,UAAMC,IAAI,GAAGC,QAAQ,CAACN,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,EAAkB,EAAlB,CAArB;;AAEA,UAAMO,MAAM,GAAGD,QAAQ,CAACN,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,EAAkB,EAAlB,CAAvB;;AAEA,UAAMQ,KAAK,GAAGF,QAAQ,CAACN,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,EAAkB,EAAlB,CAAtB;;AAEA,WAAO;AACL7C,MAAAA,GAAG,EAAEkD,IADA;AAELjD,MAAAA,KAAK,EAAEmD,MAFF;AAGLlD,MAAAA,IAAI,EAAEmD;AAHD,KAAP;AAKD;;AAED,QAAMrD,GAAG,GAAGmD,QAAQ,CAACpD,KAAK,CAACiD,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,EAAoB,EAApB,CAApB;AACA,QAAM/C,KAAK,GAAGkD,QAAQ,CAACpD,KAAK,CAACiD,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,EAAoB,EAApB,CAAtB;AACA,QAAM9C,IAAI,GAAGiD,QAAQ,CAACpD,KAAK,CAACiD,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,EAAoB,EAApB,CAArB;AACA,SAAO;AACLhD,IAAAA,GADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASoD,YAAT,CAAsBvD,KAAtB,EAA6B;AAC3B,MAAIA,KAAK,CAACwD,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACvB,WAAO,KAAP;AACD,GAFD,MAEO,IAAIxD,KAAK,CAACwD,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAChC,WAAO,KAAP;AACD,GAFM,MAEA,IAAIxD,KAAK,CAACwD,QAAN,CAAe,MAAf,CAAJ,EAA4B;AACjC,WAAO,MAAP;AACD,GAFM,MAEA,IAAIxD,KAAK,CAACwD,QAAN,CAAe,KAAf,CAAJ,EAA2B;AAChC,WAAO,KAAP;AACD,GAFM,MAEA,IAAIxD,KAAK,CAACwD,QAAN,CAAe,MAAf,CAAJ,EAA4B;AACjC,WAAO,MAAP;AACD,GAFM,MAEA;AACL,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,2DAAb;AACD;;AAED,WAAO,SAAP;AACD;AACF;;AAED,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAOA,QAAP;AACD;;AAED,QAAM3D,KAAK,GAAG,WAAW2D,QAAX,GAAsBA,QAAQ,CAAC3D,KAA/B,GAAuC,CAArD;AACA,QAAM;AACJW,IAAAA,GADI;AAEJY,IAAAA,SAFI;AAGJL,IAAAA;AAHI,MAIFyC,QAJJ;AAKA,SAAQ,QAAOhD,GAAI,KAAIO,UAAW,MAAKK,SAAU,MAAKvB,KAAM,GAA5D;AACD;;AAED,SAAS4D,WAAT,CAAqBhE,KAArB,EAA4B;AAC1B;AACA,QAAMiE,UAAU,GAAGjE,KAAK,CAACkE,KAAN,CAAY,aAAZ,CAAnB;;AAEA,MAAI,CAACD,UAAL,EAAiB;AACf,WAAO;AACLhE,MAAAA,GAAG,EAAE,CADA;AAELC,MAAAA,KAAK,EAAE,CAFF;AAGLC,MAAAA,IAAI,EAAE,CAHD;AAILC,MAAAA,KAAK,EAAE;AAJF,KAAP;AAMD;;AAED,QAAM,CAACH,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmBC,KAAnB,IAA4B6D,UAAU,CAAC,CAAD,CAAV,CAAcE,KAAd,CAAoB,GAApB,CAAlC;AACA,QAAMC,QAAQ,GAAG;AACfnE,IAAAA,GAAG,EAAEmD,QAAQ,CAACnD,GAAD,EAAM,EAAN,CADE;AAEfC,IAAAA,KAAK,EAAEkD,QAAQ,CAAClD,KAAD,EAAQ,EAAR,CAFA;AAGfC,IAAAA,IAAI,EAAEiD,QAAQ,CAACjD,IAAD,EAAO,EAAP,CAHC;AAIfC,IAAAA,KAAK,EAAEgD,QAAQ,CAAChD,KAAD,EAAQ,EAAR,CAAR,IAAuB;AAJf,GAAjB;AAMA,SAAOgE,QAAP;AACD;;AAED,SAASC,SAAT,CAAmBrE,KAAnB,EAA0B;AACxB,SAAO0C,QAAQ,CAACG,QAAQ,CAAC7C,KAAD,CAAT,CAAf;AACD;;AAED,SAASsE,eAAT,CAAyBtE,KAAzB,EAAgC;AAC9B,SAAO0C,QAAQ,CAACsB,WAAW,CAAChE,KAAD,CAAZ,CAAf;AACD;;AAED,SAASuE,WAAT,CAAqBvE,KAArB,EAA4B;AAC1B;AACA,QAAMiE,UAAU,GAAGjE,KAAK,CAACkE,KAAN,CAAY,aAAZ,CAAnB;;AAEA,MAAI,CAACD,UAAL,EAAiB;AACf,WAAO;AACLlD,MAAAA,GAAG,EAAE,CADA;AAELO,MAAAA,UAAU,EAAE,CAFP;AAGLK,MAAAA,SAAS,EAAE,CAHN;AAILvB,MAAAA,KAAK,EAAE;AAJF,KAAP;AAMD;;AAED,QAAM,CAACW,GAAD,EAAMO,UAAN,EAAkBK,SAAlB,EAA6BvB,KAA7B,IAAsC6D,UAAU,CAAC,CAAD,CAAV,CAAcE,KAAd,CAAoB,GAApB,CAA5C;AACA,QAAMC,QAAQ,GAAG;AACfrD,IAAAA,GAAG,EAAEqC,QAAQ,CAACrC,GAAD,EAAM,EAAN,CADE;AAEfO,IAAAA,UAAU,EAAE8B,QAAQ,CAAC9B,UAAD,EAAa,EAAb,CAFL;AAGfK,IAAAA,SAAS,EAAEyB,QAAQ,CAACzB,SAAD,EAAY,EAAZ,CAHJ;AAIfvB,IAAAA,KAAK,EAAEmC,UAAU,CAACnC,KAAD,CAAV,IAAqB;AAJb,GAAjB;AAMA,SAAOgE,QAAP;AACD;;AAED,SAASI,WAAT,CAAqBxE,KAArB,EAA4B;AAC1B,QAAM8B,IAAI,GAAGyB,YAAY,CAACvD,KAAD,CAAzB;;AAEA,UAAQ8B,IAAR;AACE,SAAK,KAAL;AACE,aAAOuC,SAAS,CAACrE,KAAD,CAAhB;;AAEF,SAAK,KAAL;AACA,SAAK,MAAL;AACE,aAAOsE,eAAe,CAACtE,KAAD,CAAtB;;AAEF,SAAK,KAAL;AACA,SAAK,MAAL;AACE,aAAOuE,WAAW,CAACvE,KAAD,CAAlB;;AAEF,SAAK,SAAL;AACA;AACE,YAAM,IAAIyE,KAAJ,CAAU,0DAAV,CAAN;AAdJ;AAgBD;;AAED,SAASD,WAAT,EAAsB3B,QAAtB,EAAgCjC,QAAhC,EAA0CC,QAA1C,EAAoDa,QAApD,EAA8DoC,WAA9D,EAA2E/D,SAA3E,EAAsFO,QAAtF,EAAgGmC,QAAhG,EAA0GC,QAA1G,EAAoHrC,UAApH","sourcesContent":["import { clamp as clamp$1 } from './clamp.js';\n\nfunction rgbString(color) {\n  const {\n    red,\n    green,\n    blue\n  } = color;\n\n  if ('alpha' in color) {\n    return `rgba(${red}, ${green}, ${blue}, ${color.alpha})`;\n  } else {\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n}\nconst rgbaString = rgbString;\nfunction rgbToHex({\n  red,\n  green,\n  blue\n}) {\n  return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;\n}\n\nfunction componentToHex(component) {\n  const hex = component.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\nfunction hsbToHex(color) {\n  return rgbToHex(hsbToRgb(color));\n}\n\nfunction rgbFromHueAndChroma(hue, chroma) {\n  const huePrime = hue / 60;\n  const hueDelta = 1 - Math.abs(huePrime % 2 - 1);\n  const intermediateValue = chroma * hueDelta;\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime <= 1) {\n    red = chroma;\n    green = intermediateValue;\n    blue = 0;\n  }\n\n  if (huePrime >= 1 && huePrime <= 2) {\n    red = intermediateValue;\n    green = chroma;\n    blue = 0;\n  }\n\n  if (huePrime >= 2 && huePrime <= 3) {\n    red = 0;\n    green = chroma;\n    blue = intermediateValue;\n  }\n\n  if (huePrime >= 3 && huePrime <= 4) {\n    red = 0;\n    green = intermediateValue;\n    blue = chroma;\n  }\n\n  if (huePrime >= 4 && huePrime <= 5) {\n    red = intermediateValue;\n    green = 0;\n    blue = chroma;\n  }\n\n  if (huePrime >= 5 && huePrime <= 6) {\n    red = chroma;\n    green = 0;\n    blue = intermediateValue;\n  }\n\n  return {\n    red,\n    green,\n    blue\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\nfunction hsbToRgb(color) {\n  const {\n    hue,\n    saturation,\n    brightness,\n    alpha = 1\n  } = color;\n  const chroma = brightness * saturation;\n  let {\n    red,\n    green,\n    blue\n  } = rgbFromHueAndChroma(hue, chroma);\n  const chromaBrightnessDelta = brightness - chroma;\n  red += chromaBrightnessDelta;\n  green += chromaBrightnessDelta;\n  blue += chromaBrightnessDelta;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n} // implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\nfunction hslToRgb(color) {\n  const {\n    hue,\n    saturation,\n    lightness,\n    alpha = 1\n  } = color;\n  const chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);\n  let {\n    red,\n    green,\n    blue\n  } = rgbFromHueAndChroma(hue, chroma);\n  const lightnessVal = lightness / 100 - chroma / 2;\n  red += lightnessVal;\n  green += lightnessVal;\n  blue += lightnessVal;\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n} // ref https://en.wikipedia.org/wiki/HSL_and_HSV\n\nfunction rgbToHsbl(color, type = 'b') {\n  const {\n    alpha = 1\n  } = color;\n  const red = color.red / 255;\n  const green = color.green / 255;\n  const blue = color.blue / 255;\n  const largestComponent = Math.max(red, green, blue);\n  const smallestComponent = Math.min(red, green, blue);\n  const delta = largestComponent - smallestComponent;\n  const lightness = (largestComponent + smallestComponent) / 2;\n  let saturation = 0;\n\n  if (largestComponent === 0) {\n    saturation = 0;\n  } else if (type === 'b') {\n    saturation = delta / largestComponent;\n  } else if (type === 'l') {\n    const baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);\n    saturation = isNaN(baseSaturation) ? 0 : baseSaturation;\n  }\n\n  let huePercentage = 0;\n\n  switch (largestComponent) {\n    case red:\n      huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);\n      break;\n\n    case green:\n      huePercentage = (blue - red) / delta + 2;\n      break;\n\n    case blue:\n      huePercentage = (red - green) / delta + 4;\n  }\n\n  const hue = Math.round(huePercentage / 6 * 360);\n  return {\n    hue: clamp$1(hue, 0, 360) || 0,\n    saturation: parseFloat(clamp$1(saturation, 0, 1).toFixed(2)),\n    brightness: parseFloat(clamp$1(largestComponent, 0, 1).toFixed(2)),\n    lightness: parseFloat(lightness.toFixed(2)),\n    alpha: parseFloat(alpha.toFixed(2))\n  };\n}\n\nfunction rgbToHsb(color) {\n  const {\n    hue,\n    saturation,\n    brightness,\n    alpha = 1\n  } = rgbToHsbl(color, 'b');\n  return {\n    hue,\n    saturation,\n    brightness,\n    alpha\n  };\n}\nfunction rgbToHsl(color) {\n  const {\n    hue,\n    saturation: rawSaturation,\n    lightness: rawLightness,\n    alpha = 1\n  } = rgbToHsbl(color, 'l');\n  const saturation = rawSaturation * 100;\n  const lightness = rawLightness * 100;\n  return {\n    hue,\n    saturation,\n    lightness,\n    alpha\n  };\n}\nfunction hexToRgb(color) {\n  if (color.length === 4) {\n    const repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2);\n\n    const _red = parseInt(repeatHex(1, 2), 16);\n\n    const _green = parseInt(repeatHex(2, 3), 16);\n\n    const _blue = parseInt(repeatHex(3, 4), 16);\n\n    return {\n      red: _red,\n      green: _green,\n      blue: _blue\n    };\n  }\n\n  const red = parseInt(color.slice(1, 3), 16);\n  const green = parseInt(color.slice(3, 5), 16);\n  const blue = parseInt(color.slice(5, 7), 16);\n  return {\n    red,\n    green,\n    blue\n  };\n}\n\nfunction getColorType(color) {\n  if (color.includes('#')) {\n    return 'hex';\n  } else if (color.includes('rgb')) {\n    return 'rgb';\n  } else if (color.includes('rgba')) {\n    return 'rgba';\n  } else if (color.includes('hsl')) {\n    return 'hsl';\n  } else if (color.includes('hsla')) {\n    return 'hsla';\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      /* eslint-disable-next-line no-console */\n      console.warn('Accepted colors formats are: hex, rgb, rgba, hsl and hsla');\n    }\n\n    return 'default';\n  }\n}\n\nfunction hslToString(hslColor) {\n  if (typeof hslColor === 'string') {\n    return hslColor;\n  }\n\n  const alpha = 'alpha' in hslColor ? hslColor.alpha : 1;\n  const {\n    hue,\n    lightness,\n    saturation\n  } = hslColor;\n  return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n}\n\nfunction rgbToObject(color) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const colorMatch = color.match(/\\(([^)]+)\\)/);\n\n  if (!colorMatch) {\n    return {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0\n    };\n  }\n\n  const [red, green, blue, alpha] = colorMatch[1].split(',');\n  const objColor = {\n    red: parseInt(red, 10),\n    green: parseInt(green, 10),\n    blue: parseInt(blue, 10),\n    alpha: parseInt(alpha, 10) || 1\n  };\n  return objColor;\n}\n\nfunction hexToHsla(color) {\n  return rgbToHsl(hexToRgb(color));\n}\n\nfunction rbgStringToHsla(color) {\n  return rgbToHsl(rgbToObject(color));\n}\n\nfunction hslToObject(color) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const colorMatch = color.match(/\\(([^)]+)\\)/);\n\n  if (!colorMatch) {\n    return {\n      hue: 0,\n      saturation: 0,\n      lightness: 0,\n      alpha: 0\n    };\n  }\n\n  const [hue, saturation, lightness, alpha] = colorMatch[1].split(',');\n  const objColor = {\n    hue: parseInt(hue, 10),\n    saturation: parseInt(saturation, 10),\n    lightness: parseInt(lightness, 10),\n    alpha: parseFloat(alpha) || 1\n  };\n  return objColor;\n}\n\nfunction colorToHsla(color) {\n  const type = getColorType(color);\n\n  switch (type) {\n    case 'hex':\n      return hexToHsla(color);\n\n    case 'rgb':\n    case 'rgba':\n      return rbgStringToHsla(color);\n\n    case 'hsl':\n    case 'hsla':\n      return hslToObject(color);\n\n    case 'default':\n    default:\n      throw new Error('Accepted color formats are: hex, rgb, rgba, hsl and hsla');\n  }\n}\n\nexport { colorToHsla, hexToRgb, hsbToHex, hsbToRgb, hslToRgb, hslToString, rgbString, rgbToHex, rgbToHsb, rgbToHsl, rgbaString };\n"]},"metadata":{},"sourceType":"module"}