{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar utilities_1 = require(\"../utilities\");\n\nvar dirty_1 = require(\"./dirty\");\n\nvar reset_1 = require(\"./reset\");\n\nvar submit_1 = require(\"./submit\");\n/**\n * A custom hook for managing the state of an entire form. `useForm` wraps up many of the other hooks in this package in one API, and when combined with `useField` and `useList`, allows you to easily build complex forms with smart defaults for common cases.\n *\n * ### Examples\n *\n *```typescript\n * import React from 'react';\n * import {useField, useForm} from '@shopify/react-form';\n *\n *  function MyComponent() {\n *   const { fields, submit, submitting, dirty, reset, submitErrors } = useForm({\n *     fields: {\n *       title: useField('some default title'),\n *     },\n *     onSubmit: (fieldValues) => {\n *       return {status: \"fail\", errors: [{message: 'bad form data'}]}\n *     }\n *   });\n *\n *   return (\n *     <form onSubmit={submit}>\n *       {submitting && <p className=\"loading\">loading...</p>}\n *       {submitErrors.length>0 && <p className=\"error\">submitErrors.join(', ')</p>}\n *       <div>\n *         <label for=\"title\">Title</label>\n *         <input\n *           id=\"title\"\n *           name=\"title\"\n *           value={title.value}\n *           onChange={title.onChange}\n *           onBlur={title.onBlur}\n *         />\n *         {title.error && <p className=\"error\">{title.error}</p>}\n *       </div>\n *       <button disabled={!dirty} onClick={reset}>Reset</button>\n *       <button type=\"submit\" disabled={!dirty}>Submit</button>\n *     </form>\n *  );\n *```\n *\n * @param fields - A dictionary of `Field` objects, dictionaries of `Field` objects, and lists of dictionaries of `Field` objects. Generally, you'll want these to be generated by the other hooks in this package, either `useField` or `useList`. This will be returned back out as the `fields` property of the return value.\n *\n * @param onSubmit - An async function to handle submission of the form. If this function returns an object of `{status: 'fail', error: FormError[]}` then the submission is considered a failure. Otherwise, it should return an object with `{status: 'success'}` and the submission will be considered a success. `useForm` will also call all client-side validation methods for the fields passed to it. The `onSubmit` handler will not be called if client validations fails.\n * @returns An object representing the current state of the form, with imperative methods to reset, submit, validate, and clean. Generally, the returned properties correspond 1:1 with the specific hook/utility for their functionality.\n *\n * @remarks\n * **Building your own:** Internally, `useForm` is a convenience wrapper over `useDirty`, `useReset`, and `useSubmit`. If you only need some of its functionality, consider building a custom hook combining a subset of them.\n * **Subforms:** You can have multiple `useForm`s wrapping different subsets of a group of fields. Using this you can submit subsections of the form independently and have all the error and dirty tracking logic \"just work\" together.\n */\n\n\nfunction useForm(_a) {\n  var fields = _a.fields,\n      onSubmit = _a.onSubmit,\n      _b = _a.makeCleanAfterSubmit,\n      makeCleanAfterSubmit = _b === void 0 ? false : _b;\n  var dirty = dirty_1.useDirty(fields);\n  var basicReset = reset_1.useReset(fields);\n\n  var _c = submit_1.useSubmit(onSubmit, fields, makeCleanAfterSubmit),\n      submit = _c.submit,\n      submitting = _c.submitting,\n      errors = _c.errors,\n      setErrors = _c.setErrors;\n\n  var reset = react_1.useCallback(function () {\n    setErrors([]);\n    basicReset();\n  }, [basicReset, setErrors]);\n  var fieldsRef = react_1.useRef(fields);\n  fieldsRef.current = fields;\n  var validate = react_1.useCallback(function () {\n    return utilities_1.validateAll(fieldsRef.current);\n  }, [fieldsRef]);\n  var makeClean = react_1.useCallback(function () {\n    return utilities_1.makeCleanFields(fieldsRef.current);\n  }, [fieldsRef]);\n  return {\n    fields: fields,\n    dirty: dirty,\n    submitting: submitting,\n    submit: submit,\n    reset: reset,\n    validate: validate,\n    makeClean: makeClean,\n    submitErrors: errors\n  };\n}\n\nexports.useForm = useForm;","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/react-form/dist/src/hooks/form.js"],"names":["Object","defineProperty","exports","value","react_1","require","utilities_1","dirty_1","reset_1","submit_1","useForm","_a","fields","onSubmit","_b","makeCleanAfterSubmit","dirty","useDirty","basicReset","useReset","_c","useSubmit","submit","submitting","errors","setErrors","reset","useCallback","fieldsRef","useRef","current","validate","validateAll","makeClean","makeCleanFields","submitErrors"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,OAAT,CAAiBC,EAAjB,EAAqB;AACjB,MAAIC,MAAM,GAAGD,EAAE,CAACC,MAAhB;AAAA,MAAwBC,QAAQ,GAAGF,EAAE,CAACE,QAAtC;AAAA,MAAgDC,EAAE,GAAGH,EAAE,CAACI,oBAAxD;AAAA,MAA8EA,oBAAoB,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA7H;AACA,MAAIE,KAAK,GAAGT,OAAO,CAACU,QAAR,CAAiBL,MAAjB,CAAZ;AACA,MAAIM,UAAU,GAAGV,OAAO,CAACW,QAAR,CAAiBP,MAAjB,CAAjB;;AACA,MAAIQ,EAAE,GAAGX,QAAQ,CAACY,SAAT,CAAmBR,QAAnB,EAA6BD,MAA7B,EAAqCG,oBAArC,CAAT;AAAA,MAAqEO,MAAM,GAAGF,EAAE,CAACE,MAAjF;AAAA,MAAyFC,UAAU,GAAGH,EAAE,CAACG,UAAzG;AAAA,MAAqHC,MAAM,GAAGJ,EAAE,CAACI,MAAjI;AAAA,MAAyIC,SAAS,GAAGL,EAAE,CAACK,SAAxJ;;AACA,MAAIC,KAAK,GAAGtB,OAAO,CAACuB,WAAR,CAAoB,YAAY;AACxCF,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAP,IAAAA,UAAU;AACb,GAHW,EAGT,CAACA,UAAD,EAAaO,SAAb,CAHS,CAAZ;AAIA,MAAIG,SAAS,GAAGxB,OAAO,CAACyB,MAAR,CAAejB,MAAf,CAAhB;AACAgB,EAAAA,SAAS,CAACE,OAAV,GAAoBlB,MAApB;AACA,MAAImB,QAAQ,GAAG3B,OAAO,CAACuB,WAAR,CAAoB,YAAY;AAC3C,WAAOrB,WAAW,CAAC0B,WAAZ,CAAwBJ,SAAS,CAACE,OAAlC,CAAP;AACH,GAFc,EAEZ,CAACF,SAAD,CAFY,CAAf;AAGA,MAAIK,SAAS,GAAG7B,OAAO,CAACuB,WAAR,CAAoB,YAAY;AAAE,WAAOrB,WAAW,CAAC4B,eAAZ,CAA4BN,SAAS,CAACE,OAAtC,CAAP;AAAwD,GAA1F,EAA4F,CACxGF,SADwG,CAA5F,CAAhB;AAGA,SAAO;AACHhB,IAAAA,MAAM,EAAEA,MADL;AAEHI,IAAAA,KAAK,EAAEA,KAFJ;AAGHO,IAAAA,UAAU,EAAEA,UAHT;AAIHD,IAAAA,MAAM,EAAEA,MAJL;AAKHI,IAAAA,KAAK,EAAEA,KALJ;AAMHK,IAAAA,QAAQ,EAAEA,QANP;AAOHE,IAAAA,SAAS,EAAEA,SAPR;AAQHE,IAAAA,YAAY,EAAEX;AARX,GAAP;AAUH;;AACDtB,OAAO,CAACQ,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar utilities_1 = require(\"../utilities\");\nvar dirty_1 = require(\"./dirty\");\nvar reset_1 = require(\"./reset\");\nvar submit_1 = require(\"./submit\");\n/**\n * A custom hook for managing the state of an entire form. `useForm` wraps up many of the other hooks in this package in one API, and when combined with `useField` and `useList`, allows you to easily build complex forms with smart defaults for common cases.\n *\n * ### Examples\n *\n *```typescript\n * import React from 'react';\n * import {useField, useForm} from '@shopify/react-form';\n *\n *  function MyComponent() {\n *   const { fields, submit, submitting, dirty, reset, submitErrors } = useForm({\n *     fields: {\n *       title: useField('some default title'),\n *     },\n *     onSubmit: (fieldValues) => {\n *       return {status: \"fail\", errors: [{message: 'bad form data'}]}\n *     }\n *   });\n *\n *   return (\n *     <form onSubmit={submit}>\n *       {submitting && <p className=\"loading\">loading...</p>}\n *       {submitErrors.length>0 && <p className=\"error\">submitErrors.join(', ')</p>}\n *       <div>\n *         <label for=\"title\">Title</label>\n *         <input\n *           id=\"title\"\n *           name=\"title\"\n *           value={title.value}\n *           onChange={title.onChange}\n *           onBlur={title.onBlur}\n *         />\n *         {title.error && <p className=\"error\">{title.error}</p>}\n *       </div>\n *       <button disabled={!dirty} onClick={reset}>Reset</button>\n *       <button type=\"submit\" disabled={!dirty}>Submit</button>\n *     </form>\n *  );\n *```\n *\n * @param fields - A dictionary of `Field` objects, dictionaries of `Field` objects, and lists of dictionaries of `Field` objects. Generally, you'll want these to be generated by the other hooks in this package, either `useField` or `useList`. This will be returned back out as the `fields` property of the return value.\n *\n * @param onSubmit - An async function to handle submission of the form. If this function returns an object of `{status: 'fail', error: FormError[]}` then the submission is considered a failure. Otherwise, it should return an object with `{status: 'success'}` and the submission will be considered a success. `useForm` will also call all client-side validation methods for the fields passed to it. The `onSubmit` handler will not be called if client validations fails.\n * @returns An object representing the current state of the form, with imperative methods to reset, submit, validate, and clean. Generally, the returned properties correspond 1:1 with the specific hook/utility for their functionality.\n *\n * @remarks\n * **Building your own:** Internally, `useForm` is a convenience wrapper over `useDirty`, `useReset`, and `useSubmit`. If you only need some of its functionality, consider building a custom hook combining a subset of them.\n * **Subforms:** You can have multiple `useForm`s wrapping different subsets of a group of fields. Using this you can submit subsections of the form independently and have all the error and dirty tracking logic \"just work\" together.\n */\nfunction useForm(_a) {\n    var fields = _a.fields, onSubmit = _a.onSubmit, _b = _a.makeCleanAfterSubmit, makeCleanAfterSubmit = _b === void 0 ? false : _b;\n    var dirty = dirty_1.useDirty(fields);\n    var basicReset = reset_1.useReset(fields);\n    var _c = submit_1.useSubmit(onSubmit, fields, makeCleanAfterSubmit), submit = _c.submit, submitting = _c.submitting, errors = _c.errors, setErrors = _c.setErrors;\n    var reset = react_1.useCallback(function () {\n        setErrors([]);\n        basicReset();\n    }, [basicReset, setErrors]);\n    var fieldsRef = react_1.useRef(fields);\n    fieldsRef.current = fields;\n    var validate = react_1.useCallback(function () {\n        return utilities_1.validateAll(fieldsRef.current);\n    }, [fieldsRef]);\n    var makeClean = react_1.useCallback(function () { return utilities_1.makeCleanFields(fieldsRef.current); }, [\n        fieldsRef,\n    ]);\n    return {\n        fields: fields,\n        dirty: dirty,\n        submitting: submitting,\n        submit: submit,\n        reset: reset,\n        validate: validate,\n        makeClean: makeClean,\n        submitErrors: errors,\n    };\n}\nexports.useForm = useForm;\n"]},"metadata":{},"sourceType":"script"}