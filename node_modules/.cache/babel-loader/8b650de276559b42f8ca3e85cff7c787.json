{"ast":null,"code":"import { Key } from '../../types.js';\nimport React$1, { useState, useRef, useEffect } from 'react';\nimport { EventListener as EventListener$1 } from '../EventListener/EventListener.js';\nimport { useFocusManager } from '../../utilities/focus-manager/hooks.js';\nimport { focusFirstFocusableNode, findFirstKeyboardFocusableNode, findLastKeyboardFocusableNode, focusFirstKeyboardFocusableNode, focusLastKeyboardFocusableNode } from '../../utilities/focus.js';\nimport { KeypressListener as KeypressListener$1 } from '../KeypressListener/KeypressListener.js';\nimport { Focus as Focus$1 } from '../Focus/Focus.js';\n\nfunction TrapFocus({\n  trapping = true,\n  children\n}) {\n  const [shouldFocusSelf, setFocusSelf] = useState(undefined);\n  const {\n    canSafelyFocus\n  } = useFocusManager();\n  const focusTrapWrapper = useRef(null);\n  useEffect(() => {\n    setFocusSelf(!(canSafelyFocus && focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)));\n  }, [canSafelyFocus]);\n\n  const shouldDisableFirstElementFocus = () => {\n    if (shouldFocusSelf === undefined || !canSafelyFocus) {\n      return true;\n    }\n\n    return shouldFocusSelf ? !trapping : !shouldFocusSelf;\n  };\n\n  const handleFocusIn = event => {\n    const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);\n\n    if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus) {\n      return;\n    }\n\n    if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {\n      focusFirstFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  const handleTab = event => {\n    if (trapping === false || !focusTrapWrapper.current) {\n      return;\n    }\n\n    const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);\n\n    if (event.target === lastFocusableNode && !event.shiftKey) {\n      event.preventDefault();\n      focusFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n\n    if (event.target === firstFocusableNode && event.shiftKey) {\n      event.preventDefault();\n      focusLastKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  return /*#__PURE__*/React$1.createElement(Focus$1, {\n    disabled: shouldDisableFirstElementFocus(),\n    root: focusTrapWrapper.current\n  }, /*#__PURE__*/React$1.createElement(\"div\", {\n    ref: focusTrapWrapper\n  }, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"focusin\",\n    handler: handleFocusIn\n  }), /*#__PURE__*/React$1.createElement(KeypressListener$1, {\n    keyCode: Key.Tab,\n    keyEvent: \"keydown\",\n    handler: handleTab\n  }), children));\n}\n\nexport { TrapFocus };","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/polaris/dist/esm/components/TrapFocus/TrapFocus.js"],"names":["Key","React$1","useState","useRef","useEffect","EventListener","EventListener$1","useFocusManager","focusFirstFocusableNode","findFirstKeyboardFocusableNode","findLastKeyboardFocusableNode","focusFirstKeyboardFocusableNode","focusLastKeyboardFocusableNode","KeypressListener","KeypressListener$1","Focus","Focus$1","TrapFocus","trapping","children","shouldFocusSelf","setFocusSelf","undefined","canSafelyFocus","focusTrapWrapper","current","contains","document","activeElement","shouldDisableFirstElementFocus","handleFocusIn","event","containerContentsHaveFocus","target","HTMLElement","handleTab","firstFocusableNode","lastFocusableNode","shiftKey","preventDefault","createElement","disabled","root","ref","handler","keyCode","Tab","keyEvent"],"mappings":"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","sourcesContent":["import { Key } from '../../types.js';\nimport React$1, { useState, useRef, useEffect } from 'react';\nimport { EventListener as EventListener$1 } from '../EventListener/EventListener.js';\nimport { useFocusManager } from '../../utilities/focus-manager/hooks.js';\nimport { focusFirstFocusableNode, findFirstKeyboardFocusableNode, findLastKeyboardFocusableNode, focusFirstKeyboardFocusableNode, focusLastKeyboardFocusableNode } from '../../utilities/focus.js';\nimport { KeypressListener as KeypressListener$1 } from '../KeypressListener/KeypressListener.js';\nimport { Focus as Focus$1 } from '../Focus/Focus.js';\n\nfunction TrapFocus({\n  trapping = true,\n  children\n}) {\n  const [shouldFocusSelf, setFocusSelf] = useState(undefined);\n  const {\n    canSafelyFocus\n  } = useFocusManager();\n  const focusTrapWrapper = useRef(null);\n  useEffect(() => {\n    setFocusSelf(!(canSafelyFocus && focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)));\n  }, [canSafelyFocus]);\n\n  const shouldDisableFirstElementFocus = () => {\n    if (shouldFocusSelf === undefined || !canSafelyFocus) {\n      return true;\n    }\n\n    return shouldFocusSelf ? !trapping : !shouldFocusSelf;\n  };\n\n  const handleFocusIn = event => {\n    const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);\n\n    if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus) {\n      return;\n    }\n\n    if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {\n      focusFirstFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  const handleTab = event => {\n    if (trapping === false || !focusTrapWrapper.current) {\n      return;\n    }\n\n    const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);\n\n    if (event.target === lastFocusableNode && !event.shiftKey) {\n      event.preventDefault();\n      focusFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n\n    if (event.target === firstFocusableNode && event.shiftKey) {\n      event.preventDefault();\n      focusLastKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  return /*#__PURE__*/React$1.createElement(Focus$1, {\n    disabled: shouldDisableFirstElementFocus(),\n    root: focusTrapWrapper.current\n  }, /*#__PURE__*/React$1.createElement(\"div\", {\n    ref: focusTrapWrapper\n  }, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"focusin\",\n    handler: handleFocusIn\n  }), /*#__PURE__*/React$1.createElement(KeypressListener$1, {\n    keyCode: Key.Tab,\n    keyEvent: \"keydown\",\n    handler: handleTab\n  }), children));\n}\n\nexport { TrapFocus };\n"]},"metadata":{},"sourceType":"module"}