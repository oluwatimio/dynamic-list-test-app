{"ast":null,"code":"import React$1, { useRef, useEffect } from 'react';\nimport { useFeatures } from '../../../../utilities/features/hooks.js';\nimport { classNames } from '../../../../utilities/css.js';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '../../../../utilities/focus.js';\nimport { UnstyledLink as UnstyledLink$1 } from '../../../UnstyledLink/UnstyledLink.js';\nimport styles from '../../Tabs.scss.js';\n\nfunction Tab({\n  id,\n  focused,\n  siblingTabHasFocus,\n  children,\n  onClick,\n  selected,\n  url,\n  panelID,\n  measuring,\n  accessibilityLabel\n}) {\n  const wasSelected = useRef(selected);\n  const panelFocused = useRef(false);\n  const node = useRef(null);\n  const {\n    newDesignLanguage\n  } = useFeatures(); // A tab can start selected when it is moved from the disclosure dropdown\n  // into the main list, so we need to send focus from the tab to the panel\n  // on mount and update\n\n  useEffect(() => {\n    if (measuring) {\n      return;\n    } // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this\n    // as a second indicator of focus\n\n\n    const itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will\n    // be focused on page load, which we don’t want\n\n    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {\n      focusPanelID(panelID);\n      panelFocused.current = true;\n    }\n\n    if (selected && !wasSelected.current && panelID != null) {\n      focusPanelID(panelID);\n    } else if (focused && node.current != null) {\n      focusFirstFocusableNode(node.current);\n    }\n\n    wasSelected.current = selected;\n  }, [focused, id, measuring, panelID, selected]);\n  const handleClick = onClick && onClick.bind(null, id);\n  const className = classNames(styles.Tab, selected && styles['Tab-selected']);\n  let tabIndex;\n\n  if (selected && !siblingTabHasFocus && !measuring) {\n    tabIndex = 0;\n  } else if (focused && !measuring) {\n    tabIndex = 0;\n  } else {\n    tabIndex = -1;\n  }\n\n  const tabContainerClassNames = classNames(styles.TabContainer, selected && styles.Underline, newDesignLanguage && styles.newDesignLanguage);\n  const tabTitleClassNames = classNames(styles.Title, newDesignLanguage && styles.newDesignLanguage);\n  const markup = url ? /*#__PURE__*/React$1.createElement(UnstyledLink$1, {\n    id: id,\n    url: url,\n    role: \"tab\",\n    tabIndex: tabIndex,\n    onClick: handleClick,\n    className: className,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: tabTitleClassNames\n  }, children)) : /*#__PURE__*/React$1.createElement(\"button\", {\n    id: id,\n    role: \"tab\",\n    type: \"button\",\n    tabIndex: tabIndex,\n    className: className,\n    onClick: handleClick,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: tabTitleClassNames\n  }, children));\n  return /*#__PURE__*/React$1.createElement(\"li\", {\n    className: tabContainerClassNames,\n    ref: node\n  }, markup);\n}\n\nfunction focusPanelID(panelID) {\n  const panel = document.getElementById(panelID);\n\n  if (panel) {\n    panel.focus({\n      preventScroll: true\n    });\n  }\n}\n\nexport { Tab };","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/polaris/dist/esm/components/Tabs/components/Tab/Tab.js"],"names":["React$1","useRef","useEffect","useFeatures","classNames","focusFirstFocusableNode","handleMouseUpByBlurring","UnstyledLink","UnstyledLink$1","styles","Tab","id","focused","siblingTabHasFocus","children","onClick","selected","url","panelID","measuring","accessibilityLabel","wasSelected","panelFocused","node","newDesignLanguage","itemHadFocus","document","activeElement","current","focusPanelID","handleClick","bind","className","tabIndex","tabContainerClassNames","TabContainer","Underline","tabTitleClassNames","Title","markup","createElement","role","onMouseUp","type","ref","panel","getElementById","focus","preventScroll"],"mappings":"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","sourcesContent":["import React$1, { useRef, useEffect } from 'react';\nimport { useFeatures } from '../../../../utilities/features/hooks.js';\nimport { classNames } from '../../../../utilities/css.js';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '../../../../utilities/focus.js';\nimport { UnstyledLink as UnstyledLink$1 } from '../../../UnstyledLink/UnstyledLink.js';\nimport styles from '../../Tabs.scss.js';\n\nfunction Tab({\n  id,\n  focused,\n  siblingTabHasFocus,\n  children,\n  onClick,\n  selected,\n  url,\n  panelID,\n  measuring,\n  accessibilityLabel\n}) {\n  const wasSelected = useRef(selected);\n  const panelFocused = useRef(false);\n  const node = useRef(null);\n  const {\n    newDesignLanguage\n  } = useFeatures(); // A tab can start selected when it is moved from the disclosure dropdown\n  // into the main list, so we need to send focus from the tab to the panel\n  // on mount and update\n\n  useEffect(() => {\n    if (measuring) {\n      return;\n    } // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this\n    // as a second indicator of focus\n\n\n    const itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will\n    // be focused on page load, which we don’t want\n\n    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {\n      focusPanelID(panelID);\n      panelFocused.current = true;\n    }\n\n    if (selected && !wasSelected.current && panelID != null) {\n      focusPanelID(panelID);\n    } else if (focused && node.current != null) {\n      focusFirstFocusableNode(node.current);\n    }\n\n    wasSelected.current = selected;\n  }, [focused, id, measuring, panelID, selected]);\n  const handleClick = onClick && onClick.bind(null, id);\n  const className = classNames(styles.Tab, selected && styles['Tab-selected']);\n  let tabIndex;\n\n  if (selected && !siblingTabHasFocus && !measuring) {\n    tabIndex = 0;\n  } else if (focused && !measuring) {\n    tabIndex = 0;\n  } else {\n    tabIndex = -1;\n  }\n\n  const tabContainerClassNames = classNames(styles.TabContainer, selected && styles.Underline, newDesignLanguage && styles.newDesignLanguage);\n  const tabTitleClassNames = classNames(styles.Title, newDesignLanguage && styles.newDesignLanguage);\n  const markup = url ? /*#__PURE__*/React$1.createElement(UnstyledLink$1, {\n    id: id,\n    url: url,\n    role: \"tab\",\n    tabIndex: tabIndex,\n    onClick: handleClick,\n    className: className,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: tabTitleClassNames\n  }, children)) : /*#__PURE__*/React$1.createElement(\"button\", {\n    id: id,\n    role: \"tab\",\n    type: \"button\",\n    tabIndex: tabIndex,\n    className: className,\n    onClick: handleClick,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: tabTitleClassNames\n  }, children));\n  return /*#__PURE__*/React$1.createElement(\"li\", {\n    className: tabContainerClassNames,\n    ref: node\n  }, markup);\n}\n\nfunction focusPanelID(panelID) {\n  const panel = document.getElementById(panelID);\n\n  if (panel) {\n    panel.focus({\n      preventScroll: true\n    });\n  }\n}\n\nexport { Tab };\n"]},"metadata":{},"sourceType":"module"}