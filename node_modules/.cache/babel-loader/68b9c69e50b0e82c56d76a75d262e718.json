{"ast":null,"code":"import React$1, { useRef, useContext, useEffect } from 'react';\nimport { useFeatures } from '../../utilities/features/hooks.js';\nimport { classNames } from '../../utilities/css.js';\nimport { Checkbox as Checkbox$1 } from '../Checkbox/Checkbox.js';\nimport { ResourceListContext } from '../../utilities/resource-list/context.js';\nimport styles from './CheckableButton.scss.js';\n\nfunction CheckableButton({\n  accessibilityLabel,\n  label = '',\n  onToggleAll,\n  selected,\n  selectMode,\n  plain,\n  measuring,\n  disabled,\n  smallScreen\n}) {\n  const checkBoxRef = useRef(null);\n  const {\n    newDesignLanguage\n  } = useFeatures();\n  const {\n    registerCheckableButtons\n  } = useContext(ResourceListContext);\n  let currentKey = 'bulkLg';\n\n  if (plain) {\n    currentKey = 'plain';\n  } else if (smallScreen) {\n    currentKey = 'bulkSm';\n  }\n\n  useEffect(() => {\n    if (checkBoxRef.current && registerCheckableButtons) {\n      registerCheckableButtons(currentKey, checkBoxRef.current);\n    }\n  }, [currentKey, registerCheckableButtons]);\n  const className = plain ? classNames(styles.CheckableButton, styles['CheckableButton-plain'], newDesignLanguage && styles.newDesignLanguage) : classNames(styles.CheckableButton, newDesignLanguage && styles.newDesignLanguage, selectMode && styles['CheckableButton-selectMode'], selected && styles['CheckableButton-selected'], measuring && styles['CheckableButton-measuring']);\n  return /*#__PURE__*/React$1.createElement(\"div\", {\n    className: className,\n    onClick: onToggleAll\n  }, /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.Checkbox\n  }, /*#__PURE__*/React$1.createElement(Checkbox$1, {\n    label: accessibilityLabel,\n    labelHidden: true,\n    checked: selected,\n    disabled: disabled,\n    onChange: onToggleAll,\n    ref: checkBoxRef\n  })), /*#__PURE__*/React$1.createElement(\"span\", {\n    className: styles.Label\n  }, label));\n}\n\nexport { CheckableButton };","map":{"version":3,"sources":["/Users/timi/Desktop/typescript-test/node_modules/@shopify/polaris/dist/esm/components/CheckableButton/CheckableButton.js"],"names":["React$1","useRef","useContext","useEffect","useFeatures","classNames","Checkbox","Checkbox$1","ResourceListContext","styles","CheckableButton","accessibilityLabel","label","onToggleAll","selected","selectMode","plain","measuring","disabled","smallScreen","checkBoxRef","newDesignLanguage","registerCheckableButtons","currentKey","current","className","createElement","onClick","labelHidden","checked","onChange","ref","Label"],"mappings":"AAAA,OAAOA,OAAP,IAAkBC,MAAlB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,QAAQ,IAAIC,UAArB,QAAuC,yBAAvC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,SAASC,eAAT,CAAyB;AACvBC,EAAAA,kBADuB;AAEvBC,EAAAA,KAAK,GAAG,EAFe;AAGvBC,EAAAA,WAHuB;AAIvBC,EAAAA,QAJuB;AAKvBC,EAAAA,UALuB;AAMvBC,EAAAA,KANuB;AAOvBC,EAAAA,SAPuB;AAQvBC,EAAAA,QARuB;AASvBC,EAAAA;AATuB,CAAzB,EAUG;AACD,QAAMC,WAAW,GAAGnB,MAAM,CAAC,IAAD,CAA1B;AACA,QAAM;AACJoB,IAAAA;AADI,MAEFjB,WAAW,EAFf;AAGA,QAAM;AACJkB,IAAAA;AADI,MAEFpB,UAAU,CAACM,mBAAD,CAFd;AAGA,MAAIe,UAAU,GAAG,QAAjB;;AAEA,MAAIP,KAAJ,EAAW;AACTO,IAAAA,UAAU,GAAG,OAAb;AACD,GAFD,MAEO,IAAIJ,WAAJ,EAAiB;AACtBI,IAAAA,UAAU,GAAG,QAAb;AACD;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,WAAW,CAACI,OAAZ,IAAuBF,wBAA3B,EAAqD;AACnDA,MAAAA,wBAAwB,CAACC,UAAD,EAAaH,WAAW,CAACI,OAAzB,CAAxB;AACD;AACF,GAJQ,EAIN,CAACD,UAAD,EAAaD,wBAAb,CAJM,CAAT;AAKA,QAAMG,SAAS,GAAGT,KAAK,GAAGX,UAAU,CAACI,MAAM,CAACC,eAAR,EAAyBD,MAAM,CAAC,uBAAD,CAA/B,EAA0DY,iBAAiB,IAAIZ,MAAM,CAACY,iBAAtF,CAAb,GAAwHhB,UAAU,CAACI,MAAM,CAACC,eAAR,EAAyBW,iBAAiB,IAAIZ,MAAM,CAACY,iBAArD,EAAwEN,UAAU,IAAIN,MAAM,CAAC,4BAAD,CAA5F,EAA4HK,QAAQ,IAAIL,MAAM,CAAC,0BAAD,CAA9I,EAA4KQ,SAAS,IAAIR,MAAM,CAAC,2BAAD,CAA/L,CAAzJ;AACA,SAAO,aAAaT,OAAO,CAAC0B,aAAR,CAAsB,KAAtB,EAA6B;AAC/CD,IAAAA,SAAS,EAAEA,SADoC;AAE/CE,IAAAA,OAAO,EAAEd;AAFsC,GAA7B,EAGjB,aAAab,OAAO,CAAC0B,aAAR,CAAsB,KAAtB,EAA6B;AAC3CD,IAAAA,SAAS,EAAEhB,MAAM,CAACH;AADyB,GAA7B,EAEb,aAAaN,OAAO,CAAC0B,aAAR,CAAsBnB,UAAtB,EAAkC;AAChDK,IAAAA,KAAK,EAAED,kBADyC;AAEhDiB,IAAAA,WAAW,EAAE,IAFmC;AAGhDC,IAAAA,OAAO,EAAEf,QAHuC;AAIhDI,IAAAA,QAAQ,EAAEA,QAJsC;AAKhDY,IAAAA,QAAQ,EAAEjB,WALsC;AAMhDkB,IAAAA,GAAG,EAAEX;AAN2C,GAAlC,CAFA,CAHI,EAYf,aAAapB,OAAO,CAAC0B,aAAR,CAAsB,MAAtB,EAA8B;AAC9CD,IAAAA,SAAS,EAAEhB,MAAM,CAACuB;AAD4B,GAA9B,EAEfpB,KAFe,CAZE,CAApB;AAeD;;AAED,SAASF,eAAT","sourcesContent":["import React$1, { useRef, useContext, useEffect } from 'react';\nimport { useFeatures } from '../../utilities/features/hooks.js';\nimport { classNames } from '../../utilities/css.js';\nimport { Checkbox as Checkbox$1 } from '../Checkbox/Checkbox.js';\nimport { ResourceListContext } from '../../utilities/resource-list/context.js';\nimport styles from './CheckableButton.scss.js';\n\nfunction CheckableButton({\n  accessibilityLabel,\n  label = '',\n  onToggleAll,\n  selected,\n  selectMode,\n  plain,\n  measuring,\n  disabled,\n  smallScreen\n}) {\n  const checkBoxRef = useRef(null);\n  const {\n    newDesignLanguage\n  } = useFeatures();\n  const {\n    registerCheckableButtons\n  } = useContext(ResourceListContext);\n  let currentKey = 'bulkLg';\n\n  if (plain) {\n    currentKey = 'plain';\n  } else if (smallScreen) {\n    currentKey = 'bulkSm';\n  }\n\n  useEffect(() => {\n    if (checkBoxRef.current && registerCheckableButtons) {\n      registerCheckableButtons(currentKey, checkBoxRef.current);\n    }\n  }, [currentKey, registerCheckableButtons]);\n  const className = plain ? classNames(styles.CheckableButton, styles['CheckableButton-plain'], newDesignLanguage && styles.newDesignLanguage) : classNames(styles.CheckableButton, newDesignLanguage && styles.newDesignLanguage, selectMode && styles['CheckableButton-selectMode'], selected && styles['CheckableButton-selected'], measuring && styles['CheckableButton-measuring']);\n  return /*#__PURE__*/React$1.createElement(\"div\", {\n    className: className,\n    onClick: onToggleAll\n  }, /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.Checkbox\n  }, /*#__PURE__*/React$1.createElement(Checkbox$1, {\n    label: accessibilityLabel,\n    labelHidden: true,\n    checked: selected,\n    disabled: disabled,\n    onChange: onToggleAll,\n    ref: checkBoxRef\n  })), /*#__PURE__*/React$1.createElement(\"span\", {\n    className: styles.Label\n  }, label));\n}\n\nexport { CheckableButton };\n"]},"metadata":{},"sourceType":"module"}