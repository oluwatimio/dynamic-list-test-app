import { useMemo, useEffect } from 'react';
import isEqual from 'fast-deep-equal';
import { mapObject, normalizeValidation } from "../../utilities.esnext";
import { useHandlers, useListReducer, reinitializeAction } from "./hooks/index.esnext";
/*

 * A custom hook for handling the state and validations of fields for a list of objects which can be built upon. (e.g useList and useDynamicList).

 * @param listOrConfig - A configuration object specifying both the value and validation config.
 * @param validationDependencies - An array of dependencies to use to decide when to regenerate validators.
 * @returns A list of dictionaries of `Field` objects representing the state of your input and a dispatcher which can be used for other hooks to build around base list (e.g useList and useDynamicList).
 *
 * @remarks
 * **Reinitialization:** If the `list` property of the field configuration changes between calls to `useBaseList`,
 * the field will be reset to use it as it's new default value.
 *
 * **Imperative methods:** The returned `Field` objects contains a number of methods used to imperatively alter their state.
 * These should only be used as escape hatches where the existing hooks and components do not make your life easy,
 * or to build new abstractions in the same vein as `useForm`, `useSubmit` and friends.
 *
*/

export function useBaseList(listOrConfig, validationDependencies = []) {
  const list = Array.isArray(listOrConfig) ? listOrConfig : listOrConfig.list;
  const validates = Array.isArray(listOrConfig) ? {} : listOrConfig.validates || {};
  const [state, dispatch] = useListReducer(list);
  useEffect(() => {
    if (!isEqual(list, state.initial)) {
      dispatch(reinitializeAction(list));
    }
  }, [list, state.initial, dispatch]);
  const validationConfigs = useMemo(() => mapObject(validates, normalizeValidation), // eslint-disable-next-line react-hooks/exhaustive-deps
  [validates, ...validationDependencies]);
  const handlers = useHandlers(state, dispatch, validationConfigs);
  const fields = useMemo(() => {
    return state.list.map((item, index) => {
      return mapObject(item, (field, key) => {
        return { ...field,
          ...handlers[index][key]
        };
      });
    });
  }, [state.list, handlers]);

  const equals = (a, b) => a.length === b.length && a.every((v, i) => v === b[i]); // dirty: equals(state.initial, state.list


  return {
    fields,
    dispatch
  };
}